{
    "contents" : "# Bivariate normal distribution\nlibrary(mvtnorm)\nlibrary(plot3D)\n# type in parameter\nmu_x = 0\nmu_y = 10\nsx = 0.15\nsy = 1\nr = 0.9\nn = 100\ncutoff <- 3.5\n\n# Create grid of interesting values.\nx <- seq(mu_x - cutoff * sx, mu_x + cutoff * sx, length = n)\ny <- seq(mu_y - cutoff * sy, mu_y + cutoff * sy, length = n)\n\n\n# create the mean matrix (u) and covariance matrix (s)\nu <- c(mu_x, mu_y)\ncovariance <- r * sx * sy\ns <- matrix(c(sx ^ 2, covariance, covariance, sy ^ 2), 2)\n\n# setup matrix to store densities\nbivariate_normal <- matrix(0, n, n)\n\n# calculates the densities\nfor (i in seq_along(x)) {\n  for (j in seq_along(y)) {\n    bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)\n  }\n}\n\n# slide bar parameter\nvertical_rotation = 0\nhorizontal_rotation = 0\n\n# plots\npersp3D(\n  x,\n  y,\n  bivariate_normal,\n  colvar = bivariate_normal,\n  phi = vertical_rotation,\n  theta = horizontal_rotation,\n  ticktype = \"detailed\",\n  expand = 0.5,\n  shade = 0.2,\n  xlab = \"x\",\n  ylab = \"y\",\n  zlab = \"z = f(x, y)\",\n  contour = TRUE\n)\n#-------------------------------------------------------------------------------\n# wrap-up function\nbivariate_normal_3d <- function(mu_x,mu_y,sx,sy,r,n,cutoff,\n                               vertical_rotation,horizontal_rotation){\n  # Use mvtnorm library and plot3D library\n  library(mvtnorm)\n  library(plot3D)\n  # Create grid of interesting values.\n  x <- seq(mu_x - cutoff * sx, mu_x + cutoff * sx, length = n)\n  y <- seq(mu_y - cutoff * sy, mu_y + cutoff * sy, length = n)\n  \n  \n  # create the mean matrix (u) and covariance matrix (s)\n  u <- c(mu_x, mu_y)\n  covariance <- r * sx * sy\n  s <- matrix(c(sx ^ 2, covariance, covariance, sy ^ 2), 2)\n  \n  # setup matrix to store densities\n  bivariate_normal <- matrix(0, n, n)\n  \n  # calculates the densities\n  for (i in seq_along(x)) {\n    for (j in seq_along(y)) {\n      bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)\n    }\n  }\n  \n  # plots\n  persp3D(\n    x,\n    y,\n    bivariate_normal,\n    colvar = bivariate_normal,\n    phi = vertical_rotation,\n    theta = horizontal_rotation,\n    ticktype = \"detailed\",\n    expand = 0.5,\n    shade = 0.2,\n    xlab = \"x\",\n    ylab = \"y\",\n    zlab = \"z = f(x, y)\",\n    contour = TRUE\n  )\n}\n\n# local test\nbivariate_normal_3d(0,10,0.15,1,0.6,100,3.5,0,0)\n\n# Run the app with code on the webpage\nrunApp(\"honor\", display.mode = \"showcase\")\n\n#------------------------------------------------------------------------------\n# Conditional 3D plot\n# wrap-up function\ncondition_3d <- function(mu_x,mu_y,sx,sy,r,n,cutoff,\n                                vertical_rotation,horizontal_rotation,cx,cy){\n  # Use mvtnorm library and plot3D library\n  library(mvtnorm)\n  library(plot3D)\n  # Create grid of interesting values.\n  x <- seq(mu_x - cutoff * sx, mu_x + cutoff * sx, length = n)\n  y <- seq(mu_y - cutoff * sy, mu_y + cutoff * sy, length = n)\n  \n  \n  # create the mean matrix (u) and covariance matrix (s)\n  u <- c(mu_x, mu_y)\n  covariance <- r * sx * sy\n  s <- matrix(c(sx ^ 2, covariance, covariance, sy ^ 2), 2)\n  \n  # setup matrix to store densities\n  bivariate_normal <- matrix(0, n, n)\n  \n  # calculates the densities\n  if(missing(cx) & missing(cy)){\n    for (i in seq_along(x)) {\n      for (j in seq_along(y)) {\n        bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)\n      }\n    }\n    # plots\n    persp3D(\n      x,\n      y,\n      bivariate_normal,\n      colvar = bivariate_normal,\n      phi = vertical_rotation,\n      theta = horizontal_rotation,\n      ticktype = \"detailed\",\n      expand = 0.5,\n      shade = 0.2,\n      xlab = \"x\",\n      ylab = \"y\",\n      zlab = \"z = f(x, y)\"\n    )\n  }\n  # condition on given X\n  else if(missing(cy)){\n    for (i in which.min(abs(x - cx)):length(x) ) {\n      for (j in seq_along(y)) {\n        bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)\n      }\n    }\n    # plots\n    persp3D(\n      x,\n      y,\n      bivariate_normal,\n      colvar = bivariate_normal,\n      phi = vertical_rotation,\n      theta = horizontal_rotation,\n      ticktype = \"detailed\",\n      expand = 0.5,\n      shade = 0.2,\n      xlab = \"x\",\n      ylab = \"y\",\n      zlab = \"z = f(x, y)\"\n    )\n  }\n  # condition on given Y\n  else if(missing(cx)){\n    for (i in seq_along(x)) {\n      for (j in which.min(abs(y - cy)):length(y)) {\n        bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)\n      }\n    }\n    # plots\n    persp3D(\n      x,\n      y,\n      bivariate_normal,\n      colvar = bivariate_normal,\n      phi = vertical_rotation,\n      theta = horizontal_rotation,\n      ticktype = \"detailed\",\n      expand = 0.5,\n      shade = 0.2,\n      xlab = \"x\",\n      ylab = \"y\",\n      zlab = \"z = f(x, y)\"\n    )\n  }\n  # For debug use. This should not happen\n  else{\n    for (i in which.min(abs(x - cx)):length(x)) {\n      for (j in  which.min(abs(y - cy)):length(y)) {\n        bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)\n      }\n    }\n    # plots\n    persp3D(\n      x,\n      y,\n      bivariate_normal,\n      colvar = bivariate_normal,\n      phi = vertical_rotation,\n      theta = horizontal_rotation,\n      ticktype = \"detailed\",\n      expand = 0.5,\n      shade = 0.2,\n      xlab = \"x\",\n      ylab = \"y\",\n      zlab = \"z = f(x, y)\"\n    )\n  }\n}\n\n# local test\ncondition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02)\n#------------------------------------------------------------------------------------------------\n# Work on list\n# 1. Set the flat contour plot(does not need to change with the rotation) \n#    along with the 3D bivariate normal plot\n# 2. Create a click button, when it is clicked, show the argument of condition on X and Y\n# 3. Show one slice of joint probability given X or Y on 3D dimension\n# 4. Show the 3D condition plot\n# 5. Create a github account to share the 3D bivariate code\n# 6. Set up own Shiny url: https://www.rstudio.com/pricing/\n",
    "created" : 1445802442878.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3134612749",
    "id" : "6882D05C",
    "lastKnownWriteTime" : 1449171588,
    "path" : "C:/D/Study/James Scholar Program/Fall 2015 STAT 420/Honor/honor.R",
    "project_path" : "honor.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}