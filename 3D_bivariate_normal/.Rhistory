condition_3d <- function(mu_x,mu_y,sx,sy,r,n,cutoff,
vertical_rotation,horizontal_rotation,cx,cy){
# Use mvtnorm library and plot3D library
library(mvtnorm)
library(plot3D)
# Create grid of interesting values.
x <- seq(mu_x - cutoff * sx, mu_x + cutoff * sx, length = n)
y <- seq(mu_y - cutoff * sy, mu_y + cutoff * sy, length = n)
# create the mean matrix (u) and covariance matrix (s)
u <- c(mu_x, mu_y)
covariance <- r * sx * sy
s <- matrix(c(sx ^ 2, covariance, covariance, sy ^ 2), 2)
# setup matrix to store densities
bivariate_normal <- matrix(0, n, n)
# calculates the densities
if(missing(cx) & missing(cy)){
for (i in seq_along(x)) {
for (j in seq_along(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
else if(!missing(cx)){
contour(bivariate_normal)
}
}
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=10)
y
x
plot(3,5)
plot(1,1)
which.min(abs(x - 0.4))
which.min((x - 0.4))
seq_along(x)
len(x)
length(x)
condition_3d <- function(mu_x,mu_y,sx,sy,r,n,cutoff,
vertical_rotation,horizontal_rotation,cx,cy){
# Use mvtnorm library and plot3D library
library(mvtnorm)
library(plot3D)
# Create grid of interesting values.
x <- seq(mu_x - cutoff * sx, mu_x + cutoff * sx, length = n)
y <- seq(mu_y - cutoff * sy, mu_y + cutoff * sy, length = n)
# create the mean matrix (u) and covariance matrix (s)
u <- c(mu_x, mu_y)
covariance <- r * sx * sy
s <- matrix(c(sx ^ 2, covariance, covariance, sy ^ 2), 2)
# setup matrix to store densities
bivariate_normal <- matrix(0, n, n)
# calculates the densities
if(missing(cx) & missing(cy)){
for (i in seq_along(x)) {
for (j in seq_along(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# condition on given X
else if(missing(cy)){
for (i in which.min(abs(x - cx)):length(x) ) {
for (j in seq_along(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# condition on given Y
else if(missing(cy)){
contour(bivariate_normal)
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# For debug use. This should not happen
else{
plot(1,1)
}
}
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02)
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02,cy=7)
condition_3d <- function(mu_x,mu_y,sx,sy,r,n,cutoff,
vertical_rotation,horizontal_rotation,cx,cy){
# Use mvtnorm library and plot3D library
library(mvtnorm)
library(plot3D)
# Create grid of interesting values.
x <- seq(mu_x - cutoff * sx, mu_x + cutoff * sx, length = n)
y <- seq(mu_y - cutoff * sy, mu_y + cutoff * sy, length = n)
# create the mean matrix (u) and covariance matrix (s)
u <- c(mu_x, mu_y)
covariance <- r * sx * sy
s <- matrix(c(sx ^ 2, covariance, covariance, sy ^ 2), 2)
# setup matrix to store densities
bivariate_normal <- matrix(0, n, n)
# calculates the densities
if(missing(cx) & missing(cy)){
for (i in seq_along(x)) {
for (j in seq_along(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# condition on given X
else if(missing(cy)){
for (i in which.min(abs(x - cx)):length(x) ) {
for (j in seq_along(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# condition on given Y
else if(missing(cx)){
for (i in seq_along(x)) {
for (j in which.min(abs(y - cy)):length(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# For debug use. This should not happen
else{
plot(1,1)
}
}
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02,cy=7)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02)
condition_3d <- function(mu_x,mu_y,sx,sy,r,n,cutoff,
vertical_rotation,horizontal_rotation,cx,cy){
# Use mvtnorm library and plot3D library
library(mvtnorm)
library(plot3D)
# Create grid of interesting values.
x <- seq(mu_x - cutoff * sx, mu_x + cutoff * sx, length = n)
y <- seq(mu_y - cutoff * sy, mu_y + cutoff * sy, length = n)
# create the mean matrix (u) and covariance matrix (s)
u <- c(mu_x, mu_y)
covariance <- r * sx * sy
s <- matrix(c(sx ^ 2, covariance, covariance, sy ^ 2), 2)
# setup matrix to store densities
bivariate_normal <- matrix(0, n, n)
# calculates the densities
if(missing(cx) & missing(cy)){
for (i in seq_along(x)) {
for (j in seq_along(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# condition on given X
else if(missing(cy)){
for (i in which.min(abs(x - cx)):length(x) ) {
for (j in seq_along(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# condition on given Y
else if(missing(cx)){
for (i in seq_along(x)) {
for (j in which.min(abs(y - cy)):length(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# For debug use. This should not happen
else{
for (i in which.min(abs(x - cx)):length(x)) {
for (j in  which.min(abs(y - cy)):length(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
}
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02,cy=7)
condition_3d(0,10,0.15,1,0.6,100,3.5,20,0,cx=0.02,cy=7)
condition_3d(0,10,0.15,1,0.6,100,3.5,60,0,cx=0.02,cy=7)
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
condition_3d <- function(mu_x,mu_y,sx,sy,r,n,cutoff,
vertical_rotation,horizontal_rotation,cx,cy){
# Use mvtnorm library and plot3D library
library(mvtnorm)
library(plot3D)
# Create grid of interesting values.
x <- seq(mu_x - cutoff * sx, mu_x + cutoff * sx, length = n)
y <- seq(mu_y - cutoff * sy, mu_y + cutoff * sy, length = n)
# create the mean matrix (u) and covariance matrix (s)
u <- c(mu_x, mu_y)
covariance <- r * sx * sy
s <- matrix(c(sx ^ 2, covariance, covariance, sy ^ 2), 2)
# setup matrix to store densities
bivariate_normal <- matrix(0, n, n)
# calculates the densities
if(missing(cx) & missing(cy)){
for (i in seq_along(x)) {
for (j in seq_along(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# condition on given X
else if(missing(cy)){
for (i in which.min(abs(x - cx)):length(x) ) {
for (j in seq_along(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# condition on given Y
else if(missing(cx)){
for (i in seq_along(x)) {
for (j in which.min(abs(y - cy)):length(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
# For debug use. This should not happen
else{
for (i in which.min(abs(x - cx)):length(x)) {
for (j in  which.min(abs(y - cy)):length(y)) {
bivariate_normal[i, j] <- dmvnorm(c(x[i], y[j]), mean = u, sigma = s)
}
}
# plots
persp3D(
x,
y,
bivariate_normal,
colvar = bivariate_normal,
phi = vertical_rotation,
theta = horizontal_rotation,
ticktype = "detailed",
expand = 0.5,
shade = 0.2,
xlab = "x",
ylab = "y",
zlab = "z = f(x, y)"
)
}
}
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02)
shiny::runApp('honor')
?persp3D
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
install.packages("broom")
shiny::runApp('honor')
runApp('honor',showcase = TRUE)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,10,0,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,60,0,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,90,0,cx=0.02)
shiny::runApp('honor')
shiny::runApp('honor')
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,60,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,-60,cx=0.02)
shiny::runApp('honor')
contour(bivariate_normal)
shiny::runApp('honor')
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,-60,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,-15,cx=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,-15,cy=0.02)
shiny::runApp('honor')
condition_3d(0,10,0.15,1,0.6,100,3.5,0,-15,cx=0.02,cy=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,60,-15,cx=0.02,cy=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,-60,cx=0.02,cy=0.02)
condition_3d(0,10,0.15,1,0.6,100,3.5,0,-60,cx=-999,cy=-999)
shiny::runApp('honor')
condition_3d(0,10,0.15,1,0.6,100,3.5,0,-60)
shiny::runApp('honor')
condition_3d(0,10,0.15,1,0.6,100,3.5,0,0,cy=0.02)
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
shiny::runApp('honor')
